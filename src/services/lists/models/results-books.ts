// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { booksIsbns, booksIsbnsRequest, booksIsbnsResponse } from './books-isbns';
import { booksBuyLinks1, booksBuyLinks1Request, booksBuyLinks1Response } from './books-buy-links-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const resultsBooks = z.object({
  rank: z.number().optional(),
  rankLastWeek: z.number().optional(),
  weeksOnList: z.number().optional(),
  asterisk: z.number().optional(),
  dagger: z.number().optional(),
  primaryIsbn10: z.string().optional(),
  primaryIsbn13: z.string().optional(),
  publisher: z.string().optional(),
  description: z.string().optional(),
  price: z.string().optional(),
  title: z.string().optional(),
  author: z.string().optional(),
  contributor: z.string().optional(),
  contributorNote: z.string().optional(),
  bookImage: z.string().optional(),
  bookImageWidth: z.number().optional(),
  bookImageHeight: z.number().optional(),
  amazonProductUrl: z.string().optional(),
  ageGroup: z.string().optional(),
  bookReviewLink: z.string().optional(),
  firstChapterLink: z.string().optional(),
  sundayReviewLink: z.string().optional(),
  articleChapterLink: z.string().optional(),
  isbns: z.array(booksIsbns).optional(),
  buyLinks: z.array(booksBuyLinks1).optional(),
  bookUri: z.string().optional(),
});

/**
 *
 * @typedef  {ResultsBooks} resultsBooks
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {BooksIsbns[]}
 * @property {BooksBuyLinks1[]}
 * @property {string}
 */
export type ResultsBooks = z.infer<typeof resultsBooks>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const resultsBooksResponse = z
  .object({
    rank: z.number().optional(),
    rank_last_week: z.number().optional(),
    weeks_on_list: z.number().optional(),
    asterisk: z.number().optional(),
    dagger: z.number().optional(),
    primary_isbn10: z.string().optional(),
    primary_isbn13: z.string().optional(),
    publisher: z.string().optional(),
    description: z.string().optional(),
    price: z.string().optional(),
    title: z.string().optional(),
    author: z.string().optional(),
    contributor: z.string().optional(),
    contributor_note: z.string().optional(),
    book_image: z.string().optional(),
    book_image_width: z.number().optional(),
    book_image_height: z.number().optional(),
    amazon_product_url: z.string().optional(),
    age_group: z.string().optional(),
    book_review_link: z.string().optional(),
    first_chapter_link: z.string().optional(),
    sunday_review_link: z.string().optional(),
    article_chapter_link: z.string().optional(),
    isbns: z.array(booksIsbnsResponse).optional(),
    buy_links: z.array(booksBuyLinks1Response).optional(),
    book_uri: z.string().optional(),
  })
  .transform((data) => ({
    rank: data['rank'],
    rankLastWeek: data['rank_last_week'],
    weeksOnList: data['weeks_on_list'],
    asterisk: data['asterisk'],
    dagger: data['dagger'],
    primaryIsbn10: data['primary_isbn10'],
    primaryIsbn13: data['primary_isbn13'],
    publisher: data['publisher'],
    description: data['description'],
    price: data['price'],
    title: data['title'],
    author: data['author'],
    contributor: data['contributor'],
    contributorNote: data['contributor_note'],
    bookImage: data['book_image'],
    bookImageWidth: data['book_image_width'],
    bookImageHeight: data['book_image_height'],
    amazonProductUrl: data['amazon_product_url'],
    ageGroup: data['age_group'],
    bookReviewLink: data['book_review_link'],
    firstChapterLink: data['first_chapter_link'],
    sundayReviewLink: data['sunday_review_link'],
    articleChapterLink: data['article_chapter_link'],
    isbns: data['isbns'],
    buyLinks: data['buy_links'],
    bookUri: data['book_uri'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const resultsBooksRequest = z
  .object({
    rank: z.number().nullish(),
    rankLastWeek: z.number().nullish(),
    weeksOnList: z.number().nullish(),
    asterisk: z.number().nullish(),
    dagger: z.number().nullish(),
    primaryIsbn10: z.string().nullish(),
    primaryIsbn13: z.string().nullish(),
    publisher: z.string().nullish(),
    description: z.string().nullish(),
    price: z.string().nullish(),
    title: z.string().nullish(),
    author: z.string().nullish(),
    contributor: z.string().nullish(),
    contributorNote: z.string().nullish(),
    bookImage: z.string().nullish(),
    bookImageWidth: z.number().nullish(),
    bookImageHeight: z.number().nullish(),
    amazonProductUrl: z.string().nullish(),
    ageGroup: z.string().nullish(),
    bookReviewLink: z.string().nullish(),
    firstChapterLink: z.string().nullish(),
    sundayReviewLink: z.string().nullish(),
    articleChapterLink: z.string().nullish(),
    isbns: z.array(booksIsbnsRequest).nullish(),
    buyLinks: z.array(booksBuyLinks1Request).nullish(),
    bookUri: z.string().nullish(),
  })
  .transform((data) => ({
    rank: data['rank'],
    rank_last_week: data['rankLastWeek'],
    weeks_on_list: data['weeksOnList'],
    asterisk: data['asterisk'],
    dagger: data['dagger'],
    primary_isbn10: data['primaryIsbn10'],
    primary_isbn13: data['primaryIsbn13'],
    publisher: data['publisher'],
    description: data['description'],
    price: data['price'],
    title: data['title'],
    author: data['author'],
    contributor: data['contributor'],
    contributor_note: data['contributorNote'],
    book_image: data['bookImage'],
    book_image_width: data['bookImageWidth'],
    book_image_height: data['bookImageHeight'],
    amazon_product_url: data['amazonProductUrl'],
    age_group: data['ageGroup'],
    book_review_link: data['bookReviewLink'],
    first_chapter_link: data['firstChapterLink'],
    sunday_review_link: data['sundayReviewLink'],
    article_chapter_link: data['articleChapterLink'],
    isbns: data['isbns'],
    buy_links: data['buyLinks'],
    book_uri: data['bookUri'],
  }));
