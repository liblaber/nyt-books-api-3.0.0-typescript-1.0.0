// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { listsBooks, listsBooksRequest, listsBooksResponse } from './lists-books';

/**
 * The shape of the model inside the application code - what the users use
 */
export const lists = z.object({
  listId: z.number().optional(),
  listName: z.string().optional(),
  listNameEncoded: z.string().optional(),
  displayName: z.string().optional(),
  updated: z.string().optional(),
  listImage: z.string().optional(),
  listImageWidth: z.number().optional(),
  listImageHeight: z.number().optional(),
  books: z.array(listsBooks).optional(),
});

/**
 *
 * @typedef  {Lists} lists
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {ListsBooks[]}
 */
export type Lists = z.infer<typeof lists>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const listsResponse = z
  .object({
    list_id: z.number().optional(),
    list_name: z.string().optional(),
    list_name_encoded: z.string().optional(),
    display_name: z.string().optional(),
    updated: z.string().optional(),
    list_image: z.string().optional(),
    list_image_width: z.number().optional(),
    list_image_height: z.number().optional(),
    books: z.array(listsBooksResponse).optional(),
  })
  .transform((data) => ({
    listId: data['list_id'],
    listName: data['list_name'],
    listNameEncoded: data['list_name_encoded'],
    displayName: data['display_name'],
    updated: data['updated'],
    listImage: data['list_image'],
    listImageWidth: data['list_image_width'],
    listImageHeight: data['list_image_height'],
    books: data['books'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const listsRequest = z
  .object({
    listId: z.number().nullish(),
    listName: z.string().nullish(),
    listNameEncoded: z.string().nullish(),
    displayName: z.string().nullish(),
    updated: z.string().nullish(),
    listImage: z.string().nullish(),
    listImageWidth: z.number().nullish(),
    listImageHeight: z.number().nullish(),
    books: z.array(listsBooksRequest).nullish(),
  })
  .transform((data) => ({
    list_id: data['listId'],
    list_name: data['listName'],
    list_name_encoded: data['listNameEncoded'],
    display_name: data['displayName'],
    updated: data['updated'],
    list_image: data['listImage'],
    list_image_width: data['listImageWidth'],
    list_image_height: data['listImageHeight'],
    books: data['books'],
  }));
