// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { lists, listsRequest, listsResponse } from './lists';

/**
 * The shape of the model inside the application code - what the users use
 */
export const result = z.object({
  bestsellersDate: z.string().optional(),
  publishedDate: z.string().optional(),
  publishedDateDescription: z.string().optional(),
  previousPublishedDate: z.string().optional(),
  nextPublishedDate: z.string().optional(),
  lists: z.array(lists).optional(),
});

/**
 *
 * @typedef  {Result} result
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {Lists[]}
 */
export type Result = z.infer<typeof result>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const resultResponse = z
  .object({
    bestsellers_date: z.string().optional(),
    published_date: z.string().optional(),
    published_date_description: z.string().optional(),
    previous_published_date: z.string().optional(),
    next_published_date: z.string().optional(),
    lists: z.array(listsResponse).optional(),
  })
  .transform((data) => ({
    bestsellersDate: data['bestsellers_date'],
    publishedDate: data['published_date'],
    publishedDateDescription: data['published_date_description'],
    previousPublishedDate: data['previous_published_date'],
    nextPublishedDate: data['next_published_date'],
    lists: data['lists'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const resultRequest = z
  .object({
    bestsellersDate: z.string().nullish(),
    publishedDate: z.string().nullish(),
    publishedDateDescription: z.string().nullish(),
    previousPublishedDate: z.string().nullish(),
    nextPublishedDate: z.string().nullish(),
    lists: z.array(listsRequest).nullish(),
  })
  .transform((data) => ({
    bestsellers_date: data['bestsellersDate'],
    published_date: data['publishedDate'],
    published_date_description: data['publishedDateDescription'],
    previous_published_date: data['previousPublishedDate'],
    next_published_date: data['nextPublishedDate'],
    lists: data['lists'],
  }));
