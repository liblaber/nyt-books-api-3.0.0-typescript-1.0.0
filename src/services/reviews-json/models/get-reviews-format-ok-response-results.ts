// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getReviewsFormatOkResponseResults = z.object({
  url: z.string().optional(),
  publicationDt: z.string().optional(),
  byline: z.string().optional(),
  bookTitle: z.string().optional(),
  bookAuthor: z.string().optional(),
  summary: z.string().optional(),
  isbn13: z.array(z.string()).optional(),
});

/**
 *
 * @typedef  {GetReviewsFormatOkResponseResults} getReviewsFormatOkResponseResults
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string[]}
 */
export type GetReviewsFormatOkResponseResults = z.infer<typeof getReviewsFormatOkResponseResults>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getReviewsFormatOkResponseResultsResponse = z
  .object({
    url: z.string().optional(),
    publication_dt: z.string().optional(),
    byline: z.string().optional(),
    book_title: z.string().optional(),
    book_author: z.string().optional(),
    summary: z.string().optional(),
    isbn13: z.array(z.string()).optional(),
  })
  .transform((data) => ({
    url: data['url'],
    publicationDt: data['publication_dt'],
    byline: data['byline'],
    bookTitle: data['book_title'],
    bookAuthor: data['book_author'],
    summary: data['summary'],
    isbn13: data['isbn13'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getReviewsFormatOkResponseResultsRequest = z
  .object({
    url: z.string().nullish(),
    publicationDt: z.string().nullish(),
    byline: z.string().nullish(),
    bookTitle: z.string().nullish(),
    bookAuthor: z.string().nullish(),
    summary: z.string().nullish(),
    isbn13: z.array(z.string()).nullish(),
  })
  .transform((data) => ({
    url: data['url'],
    publication_dt: data['publicationDt'],
    byline: data['byline'],
    book_title: data['bookTitle'],
    book_author: data['bookAuthor'],
    summary: data['summary'],
    isbn13: data['isbn13'],
  }));
