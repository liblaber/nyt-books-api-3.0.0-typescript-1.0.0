// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const ranksHistory = z.object({
  primaryIsbn10: z.string().optional(),
  primaryIsbn13: z.string().optional(),
  rank: z.number().optional(),
  rankLastWeek: z.number().optional(),
  listName: z.string().optional(),
  displayName: z.string().optional(),
  publishedDate: z.string().optional(),
  bestsellersDate: z.string().optional(),
  weeksOnList: z.number().optional(),
  ranksLastWeek: z.any().optional().nullable(),
  asterisk: z.number().optional(),
  dagger: z.number().optional(),
});

/**
 *
 * @typedef  {RanksHistory} ranksHistory
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {any}
 * @property {number}
 * @property {number}
 */
export type RanksHistory = z.infer<typeof ranksHistory>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const ranksHistoryResponse = z
  .object({
    primary_isbn10: z.string().optional(),
    primary_isbn13: z.string().optional(),
    rank: z.number().optional(),
    rank_last_week: z.number().optional(),
    list_name: z.string().optional(),
    display_name: z.string().optional(),
    published_date: z.string().optional(),
    bestsellers_date: z.string().optional(),
    weeks_on_list: z.number().optional(),
    ranks_last_week: z.any().optional().nullable(),
    asterisk: z.number().optional(),
    dagger: z.number().optional(),
  })
  .transform((data) => ({
    primaryIsbn10: data['primary_isbn10'],
    primaryIsbn13: data['primary_isbn13'],
    rank: data['rank'],
    rankLastWeek: data['rank_last_week'],
    listName: data['list_name'],
    displayName: data['display_name'],
    publishedDate: data['published_date'],
    bestsellersDate: data['bestsellers_date'],
    weeksOnList: data['weeks_on_list'],
    ranksLastWeek: data['ranks_last_week'],
    asterisk: data['asterisk'],
    dagger: data['dagger'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const ranksHistoryRequest = z
  .object({
    primaryIsbn10: z.string().nullish(),
    primaryIsbn13: z.string().nullish(),
    rank: z.number().nullish(),
    rankLastWeek: z.number().nullish(),
    listName: z.string().nullish(),
    displayName: z.string().nullish(),
    publishedDate: z.string().nullish(),
    bestsellersDate: z.string().nullish(),
    weeksOnList: z.number().nullish(),
    ranksLastWeek: z.any().nullish(),
    asterisk: z.number().nullish(),
    dagger: z.number().nullish(),
  })
  .transform((data) => ({
    primary_isbn10: data['primaryIsbn10'],
    primary_isbn13: data['primaryIsbn13'],
    rank: data['rank'],
    rank_last_week: data['rankLastWeek'],
    list_name: data['listName'],
    display_name: data['displayName'],
    published_date: data['publishedDate'],
    bestsellers_date: data['bestsellersDate'],
    weeks_on_list: data['weeksOnList'],
    ranks_last_week: data['ranksLastWeek'],
    asterisk: data['asterisk'],
    dagger: data['dagger'],
  }));
