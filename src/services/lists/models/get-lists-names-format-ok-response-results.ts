// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { updated } from './updated';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getListsNamesFormatOkResponseResults = z.object({
  listName: z.string().optional(),
  displayName: z.string().optional(),
  listNameEncoded: z.string().optional(),
  oldestPublishedDate: z.string().optional(),
  newestPublishedDate: z.string().optional(),
  updated: updated.optional(),
});

/**
 *
 * @typedef  {GetListsNamesFormatOkResponseResults} getListsNamesFormatOkResponseResults
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {Updated}
 */
export type GetListsNamesFormatOkResponseResults = z.infer<typeof getListsNamesFormatOkResponseResults>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getListsNamesFormatOkResponseResultsResponse = z
  .object({
    list_name: z.string().optional(),
    display_name: z.string().optional(),
    list_name_encoded: z.string().optional(),
    oldest_published_date: z.string().optional(),
    newest_published_date: z.string().optional(),
    updated: updated.optional(),
  })
  .transform((data) => ({
    listName: data['list_name'],
    displayName: data['display_name'],
    listNameEncoded: data['list_name_encoded'],
    oldestPublishedDate: data['oldest_published_date'],
    newestPublishedDate: data['newest_published_date'],
    updated: data['updated'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getListsNamesFormatOkResponseResultsRequest = z
  .object({
    listName: z.string().nullish(),
    displayName: z.string().nullish(),
    listNameEncoded: z.string().nullish(),
    oldestPublishedDate: z.string().nullish(),
    newestPublishedDate: z.string().nullish(),
    updated: updated.nullish(),
  })
  .transform((data) => ({
    list_name: data['listName'],
    display_name: data['displayName'],
    list_name_encoded: data['listNameEncoded'],
    oldest_published_date: data['oldestPublishedDate'],
    newest_published_date: data['newestPublishedDate'],
    updated: data['updated'],
  }));
