// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { resultsIsbns2, resultsIsbns2Request, resultsIsbns2Response } from './results-isbns-2';
import { ranksHistory, ranksHistoryRequest, ranksHistoryResponse } from './ranks-history';
import { resultsReviews2, resultsReviews2Request, resultsReviews2Response } from './results-reviews-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getListsBestSellersHistoryJsonOkResponseResults = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  contributor: z.string().optional(),
  author: z.string().optional(),
  contributorNote: z.string().optional(),
  price: z.string().optional(),
  ageGroup: z.string().optional(),
  publisher: z.string().optional(),
  isbns: z.array(resultsIsbns2).optional(),
  ranksHistory: z.array(ranksHistory).optional(),
  reviews: z.array(resultsReviews2).optional(),
});

/**
 *
 * @typedef  {GetListsBestSellersHistoryJsonOkResponseResults} getListsBestSellersHistoryJsonOkResponseResults
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {ResultsIsbns2[]}
 * @property {RanksHistory[]}
 * @property {ResultsReviews2[]}
 */
export type GetListsBestSellersHistoryJsonOkResponseResults = z.infer<
  typeof getListsBestSellersHistoryJsonOkResponseResults
>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getListsBestSellersHistoryJsonOkResponseResultsResponse = z
  .object({
    title: z.string().optional(),
    description: z.string().optional(),
    contributor: z.string().optional(),
    author: z.string().optional(),
    contributor_note: z.string().optional(),
    price: z.string().optional(),
    age_group: z.string().optional(),
    publisher: z.string().optional(),
    isbns: z.array(resultsIsbns2Response).optional(),
    ranks_history: z.array(ranksHistoryResponse).optional(),
    reviews: z.array(resultsReviews2Response).optional(),
  })
  .transform((data) => ({
    title: data['title'],
    description: data['description'],
    contributor: data['contributor'],
    author: data['author'],
    contributorNote: data['contributor_note'],
    price: data['price'],
    ageGroup: data['age_group'],
    publisher: data['publisher'],
    isbns: data['isbns'],
    ranksHistory: data['ranks_history'],
    reviews: data['reviews'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getListsBestSellersHistoryJsonOkResponseResultsRequest = z
  .object({
    title: z.string().nullish(),
    description: z.string().nullish(),
    contributor: z.string().nullish(),
    author: z.string().nullish(),
    contributorNote: z.string().nullish(),
    price: z.string().nullish(),
    ageGroup: z.string().nullish(),
    publisher: z.string().nullish(),
    isbns: z.array(resultsIsbns2Request).nullish(),
    ranksHistory: z.array(ranksHistoryRequest).nullish(),
    reviews: z.array(resultsReviews2Request).nullish(),
  })
  .transform((data) => ({
    title: data['title'],
    description: data['description'],
    contributor: data['contributor'],
    author: data['author'],
    contributor_note: data['contributorNote'],
    price: data['price'],
    age_group: data['ageGroup'],
    publisher: data['publisher'],
    isbns: data['isbns'],
    ranks_history: data['ranksHistory'],
    reviews: data['reviews'],
  }));
