// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { resultsBooks, resultsBooksRequest, resultsBooksResponse } from './results-books';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getListsDateListJsonOkResponseResults = z.object({
  listName: z.string().optional(),
  listNameEncoded: z.string().optional(),
  bestsellersDate: z.string().optional(),
  bestsellersDateDescription: z.string().optional(),
  publishedDate: z.string().optional(),
  previousPublishedDate: z.string().optional(),
  displayName: z.string().optional(),
  normalListEndsAt: z.number().optional(),
  updated: z.string().optional(),
  books: z.array(resultsBooks).optional(),
  corrections: z.array(z.any()).optional(),
});

/**
 *
 * @typedef  {GetListsDateListJsonOkResponseResults} getListsDateListJsonOkResponseResults
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {string}
 * @property {ResultsBooks[]}
 * @property {any[]}
 */
export type GetListsDateListJsonOkResponseResults = z.infer<typeof getListsDateListJsonOkResponseResults>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getListsDateListJsonOkResponseResultsResponse = z
  .object({
    list_name: z.string().optional(),
    list_name_encoded: z.string().optional(),
    bestsellers_date: z.string().optional(),
    bestsellers_date_description: z.string().optional(),
    published_date: z.string().optional(),
    previous_published_date: z.string().optional(),
    display_name: z.string().optional(),
    normal_list_ends_at: z.number().optional(),
    updated: z.string().optional(),
    books: z.array(resultsBooksResponse).optional(),
    corrections: z.array(z.any()).optional(),
  })
  .transform((data) => ({
    listName: data['list_name'],
    listNameEncoded: data['list_name_encoded'],
    bestsellersDate: data['bestsellers_date'],
    bestsellersDateDescription: data['bestsellers_date_description'],
    publishedDate: data['published_date'],
    previousPublishedDate: data['previous_published_date'],
    displayName: data['display_name'],
    normalListEndsAt: data['normal_list_ends_at'],
    updated: data['updated'],
    books: data['books'],
    corrections: data['corrections'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getListsDateListJsonOkResponseResultsRequest = z
  .object({
    listName: z.string().nullish(),
    listNameEncoded: z.string().nullish(),
    bestsellersDate: z.string().nullish(),
    bestsellersDateDescription: z.string().nullish(),
    publishedDate: z.string().nullish(),
    previousPublishedDate: z.string().nullish(),
    displayName: z.string().nullish(),
    normalListEndsAt: z.number().nullish(),
    updated: z.string().nullish(),
    books: z.array(resultsBooksRequest).nullish(),
    corrections: z.array(z.any()).nullish(),
  })
  .transform((data) => ({
    list_name: data['listName'],
    list_name_encoded: data['listNameEncoded'],
    bestsellers_date: data['bestsellersDate'],
    bestsellers_date_description: data['bestsellersDateDescription'],
    published_date: data['publishedDate'],
    previous_published_date: data['previousPublishedDate'],
    display_name: data['displayName'],
    normal_list_ends_at: data['normalListEndsAt'],
    updated: data['updated'],
    books: data['books'],
    corrections: data['corrections'],
  }));
