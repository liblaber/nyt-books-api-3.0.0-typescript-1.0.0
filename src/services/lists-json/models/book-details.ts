// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const bookDetails = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  contributor: z.string().optional(),
  author: z.string().optional(),
  contributorNote: z.string().optional(),
  price: z.string().optional(),
  ageGroup: z.string().optional(),
  publisher: z.string().optional(),
  primaryIsbn13: z.string().optional(),
  primaryIsbn10: z.string().optional(),
});

/**
 *
 * @typedef  {BookDetails} bookDetails
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type BookDetails = z.infer<typeof bookDetails>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const bookDetailsResponse = z
  .object({
    title: z.string().optional(),
    description: z.string().optional(),
    contributor: z.string().optional(),
    author: z.string().optional(),
    contributor_note: z.string().optional(),
    price: z.string().optional(),
    age_group: z.string().optional(),
    publisher: z.string().optional(),
    primary_isbn13: z.string().optional(),
    primary_isbn10: z.string().optional(),
  })
  .transform((data) => ({
    title: data['title'],
    description: data['description'],
    contributor: data['contributor'],
    author: data['author'],
    contributorNote: data['contributor_note'],
    price: data['price'],
    ageGroup: data['age_group'],
    publisher: data['publisher'],
    primaryIsbn13: data['primary_isbn13'],
    primaryIsbn10: data['primary_isbn10'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const bookDetailsRequest = z
  .object({
    title: z.string().nullish(),
    description: z.string().nullish(),
    contributor: z.string().nullish(),
    author: z.string().nullish(),
    contributorNote: z.string().nullish(),
    price: z.string().nullish(),
    ageGroup: z.string().nullish(),
    publisher: z.string().nullish(),
    primaryIsbn13: z.string().nullish(),
    primaryIsbn10: z.string().nullish(),
  })
  .transform((data) => ({
    title: data['title'],
    description: data['description'],
    contributor: data['contributor'],
    author: data['author'],
    contributor_note: data['contributorNote'],
    price: data['price'],
    age_group: data['ageGroup'],
    publisher: data['publisher'],
    primary_isbn13: data['primaryIsbn13'],
    primary_isbn10: data['primaryIsbn10'],
  }));
