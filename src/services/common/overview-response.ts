// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { result, resultRequest, resultResponse } from './result';

/**
 * The shape of the model inside the application code - what the users use
 */
export const overviewResponse = z.object({
  status: z.string().optional(),
  copyright: z.string().optional(),
  numResults: z.number().optional(),
  results: result.optional(),
});

/**
 *
 * @typedef  {OverviewResponse} overviewResponse
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {Result}
 */
export type OverviewResponse = z.infer<typeof overviewResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const overviewResponseResponse = z
  .object({
    status: z.string().optional(),
    copyright: z.string().optional(),
    num_results: z.number().optional(),
    results: resultResponse.optional(),
  })
  .transform((data) => ({
    status: data['status'],
    copyright: data['copyright'],
    numResults: data['num_results'],
    results: data['results'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const overviewResponseRequest = z
  .object({
    status: z.string().nullish(),
    copyright: z.string().nullish(),
    numResults: z.number().nullish(),
    results: resultRequest.nullish(),
  })
  .transform((data) => ({
    status: data['status'],
    copyright: data['copyright'],
    num_results: data['numResults'],
    results: data['results'],
  }));
