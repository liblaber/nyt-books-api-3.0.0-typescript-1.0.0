// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { resultsIsbns1, resultsIsbns1Request, resultsIsbns1Response } from './results-isbns-1';
import { bookDetails, bookDetailsRequest, bookDetailsResponse } from './book-details';
import { resultsReviews1, resultsReviews1Request, resultsReviews1Response } from './results-reviews-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getListsFormatOkResponseResults = z.object({
  listName: z.string().optional(),
  displayName: z.string().optional(),
  bestsellersDate: z.string().optional(),
  publishedDate: z.string().optional(),
  rank: z.number().optional(),
  rankLastWeek: z.number().optional(),
  weeksOnList: z.number().optional(),
  asterisk: z.number().optional(),
  dagger: z.number().optional(),
  amazonProductUrl: z.string().optional(),
  isbns: z.array(resultsIsbns1).optional(),
  bookDetails: z.array(bookDetails).optional(),
  reviews: z.array(resultsReviews1).optional(),
});

/**
 *
 * @typedef  {GetListsFormatOkResponseResults} getListsFormatOkResponseResults
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {ResultsIsbns1[]}
 * @property {BookDetails[]}
 * @property {ResultsReviews1[]}
 */
export type GetListsFormatOkResponseResults = z.infer<typeof getListsFormatOkResponseResults>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getListsFormatOkResponseResultsResponse = z
  .object({
    list_name: z.string().optional(),
    display_name: z.string().optional(),
    bestsellers_date: z.string().optional(),
    published_date: z.string().optional(),
    rank: z.number().optional(),
    rank_last_week: z.number().optional(),
    weeks_on_list: z.number().optional(),
    asterisk: z.number().optional(),
    dagger: z.number().optional(),
    amazon_product_url: z.string().optional(),
    isbns: z.array(resultsIsbns1Response).optional(),
    book_details: z.array(bookDetailsResponse).optional(),
    reviews: z.array(resultsReviews1Response).optional(),
  })
  .transform((data) => ({
    listName: data['list_name'],
    displayName: data['display_name'],
    bestsellersDate: data['bestsellers_date'],
    publishedDate: data['published_date'],
    rank: data['rank'],
    rankLastWeek: data['rank_last_week'],
    weeksOnList: data['weeks_on_list'],
    asterisk: data['asterisk'],
    dagger: data['dagger'],
    amazonProductUrl: data['amazon_product_url'],
    isbns: data['isbns'],
    bookDetails: data['book_details'],
    reviews: data['reviews'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getListsFormatOkResponseResultsRequest = z
  .object({
    listName: z.string().nullish(),
    displayName: z.string().nullish(),
    bestsellersDate: z.string().nullish(),
    publishedDate: z.string().nullish(),
    rank: z.number().nullish(),
    rankLastWeek: z.number().nullish(),
    weeksOnList: z.number().nullish(),
    asterisk: z.number().nullish(),
    dagger: z.number().nullish(),
    amazonProductUrl: z.string().nullish(),
    isbns: z.array(resultsIsbns1Request).nullish(),
    bookDetails: z.array(bookDetailsRequest).nullish(),
    reviews: z.array(resultsReviews1Request).nullish(),
  })
  .transform((data) => ({
    list_name: data['listName'],
    display_name: data['displayName'],
    bestsellers_date: data['bestsellersDate'],
    published_date: data['publishedDate'],
    rank: data['rank'],
    rank_last_week: data['rankLastWeek'],
    weeks_on_list: data['weeksOnList'],
    asterisk: data['asterisk'],
    dagger: data['dagger'],
    amazon_product_url: data['amazonProductUrl'],
    isbns: data['isbns'],
    book_details: data['bookDetails'],
    reviews: data['reviews'],
  }));
